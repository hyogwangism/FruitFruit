<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shop.fruitfruit.admin.AdminMapper">

    <select id="loginUserChk">
        SELECT * FROM ADMIN_USER WHERE ADMIN_ID=#{id};
    </select>

    <insert id="insertProduct">
        INSERT INTO PRODUCT
        VALUES (NULL, #{productSort}, #{productName}, #{productPrice}, #{productInventory}, #{productDescription}, #{productDiscount}, "판매중", null, NOW())

    </insert>

    <select id="selectProductByProductName" resultType="int">
        SELECT PRODUCT_ID FROM PRODUCT WHERE PRODUCT_NAME=#{productName}

    </select>

    <insert id="insertProductImage" parameterType="java.util.List">
        INSERT INTO IMAGE (PRODUCT_ID, IMAGE_URL, IMAGE_PATH, IMAGE_FILENAME, IMAGE_UPLOADED_AT)
        VALUES
        <foreach collection="list" item="paramMap" separator="," >
            (#{paramMap.productId}, #{paramMap.fireBaseImageUrl}, #{paramMap.fileDBName}, #{paramMap.productName}, now())
        </foreach>
    </insert>

    <select id="selectAllProduct" resultType="HashMap">
        SELECT * FROM PRODUCT ORDER BY PRODUCT_ID DESC
    </select>

    <select id="selectProductByCondition" resultType="HashMap">
        SELECT * FROM PRODUCT
        <where>
            <!-- 이 부분은 조건식이 없을 때 사용됩니다. -->
            <if test="productSaleStatus == 'All' || productSaleStatus == null"></if>
            <if test="productSort == 'All' || productSort == null"></if>
            <!-- 이 부분은 productSaleStatus 조건이 있는 경우 사용됩니다. -->
            <if test="productSaleStatus != null and productSaleStatus != 'All'">
                AND PRODUCT_SALE_STATUS = #{productSaleStatus}
            </if>

            <if test="productSort != null and productSort != 'All'">
                AND CATEGORY_NAME = #{productSort}
            </if>
            <!-- 이 부분은 searchField 가존재하는 경우 사용됩니다. -->
            <if test="searchField != null and searchField != ''">
                AND PRODUCT_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>
        </where>

        ORDER BY PRODUCT_ID DESC
    </select>

    <update id="updateSaleStatusDate">
        UPDATE PRODUCT SET PRODUCT_SALE_STATUS = #{status}, PRODUCT_UPDATED_AT = NOW() WHERE PRODUCT_ID = #{productId}

    </update>

    <select id="updatedSaleStatusDate" resultType="HashMap">
        SELECT * FROM PRODUCT WHERE PRODUCT_ID = #{productId}

    </select>

    <select id="selectProductbyProductId" resultType="HashMap">
        SELECT P.*, I.IMAGE_URL
        FROM PRODUCT P
        LEFT JOIN IMAGE I
        ON P.PRODUCT_ID = I.PRODUCT_ID
        WHERE P.PRODUCT_ID = #{productId}

    </select>

    <select id="selectPicturebyProductId" resultType="HashMap">
        SELECT * FROM image WHERE PRODUCT_ID = #{productId}

    </select>

    <update id="updateProduct">
        UPDATE PRODUCT
        SET
            CATEGORY_NAME = #{productSort}
          , PRODUCT_NAME = #{productName}
          , PRODUCT_PRICE = #{productPrice}
          , PRODUCT_INVENTORY = #{productInventory}
          , PRODUCT_DESCRIPTION = #{productDescription}
          , PRODUCT_DISCOUNT = #{productDiscount}
          , PRODUCT_SALE_STATUS =  "판매중"
          , PRODUCT_UPDATED_AT = null
          , PRODUCT_CREATED_AT = NOW()
        WHERE
            PRODUCT_ID = #{productId}
    </update>

    <update id="updateSalectedSaleStop" parameterType="java.util.HashMap">
        UPDATE PRODUCT
        SET
        PRODUCT_SALE_STATUS =  "판매중지",
        PRODUCT_UPDATED_AT = NOW()
        WHERE
        PRODUCT_ID IN
        <foreach collection="selectedProductId" item="productId" open="(" close=")" separator=",">
            #{productId}
        </foreach>
    </update>

    <select id="selectProductsImage" resultType="HashMap">
        SELECT IMAGE_PATH
        FROM IMAGE
        WHERE
            PRODUCT_ID IN
        <foreach collection="selectedProductId" item="productId" open="(" close=")" separator=",">
            #{productId}
        </foreach>
    </select>

    <!--    리뷰 목록-->
    <select id="selectReview" resultType="HashMap">
        SELECT
            RR.REVIEW_REPLY_CONT, RR.REVIEW_REPLY_DATE,
            R.REVIEW_ID, R.REVIEW_CONT, R.REVIEW_REPLY_STATUS, R.REVIEW_DATE, R.REVIEW_REPLY_STATUS,
            U.USER_NAME, U.USER_EMAIL,
            O.ORDER_ID,
            P.PRODUCT_NAME, P.PRODUCT_ID
        FROM REVIEW R
        LEFT JOIN REVIEW_REPLY RR ON RR.REVIEW_ID = R.REVIEW_ID
        LEFT JOIN USER U ON U.USER_ID_NO = R.USER_ID_NO
        LEFT JOIN ORDER_PRODUCT OP ON OP.ORDER_PRODUCT_ID = R.ORDER_PRODUCT_ID
        LEFT JOIN PRODUCT P ON P.PRODUCT_ID = OP.PRODUCT_ID
        LEFT JOIN ORDER_TABLE O ON O.ORDER_ID = OP.ORDER_ID
        <where>
            <!-- 기본 검색 조건 -->
            <if test="startDate != null and endDate != null">
                AND R.REVIEW_DATE BETWEEN #{startDate} AND #{endDate}
            </if>

            <!-- 상품명 검색 -->
            <if test="searchType != null and searchType == '상품명' and searchField != null and searchField != ''">
                AND P.PRODUCT_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 회원ID 검색 -->
            <if test="searchType != null and searchType == '회원ID' and searchField != null and searchField != ''">
                AND U.USER_EMAIL LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 주문번호 검색 -->
            <if test="searchType != null and searchType == '주문번호' and searchField != null and searchField != ''">
                AND O.ORDER_ID = #{searchField}
            </if>

            <!-- 작성자명 검색 -->
            <if test="searchType != null and searchType == '작성자명' and searchField != null and searchField != ''">
                AND U.USER_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 작성자명 검색 -->
            <if test="REVIEW_ID != null">
                AND R.REVIEW_ID = ${REVIEW_ID}
            </if>

            <!-- 답변 상태 검색 -->
            <if test="replyStatus != null">
                <choose>
                    <when test="replyStatus == '전체'">
                        <!-- 아무 조건 없이 전체 리뷰 검색 -->
                    </when>
                    <when test="replyStatus == '답변완료'">
                        AND (R.REVIEW_REPLY_STATUS = '답변완료' OR R.REVIEW_REPLY_STATUS IS NULL)
                    </when>
                    <when test="replyStatus == '미답변'">
                        AND (R.REVIEW_REPLY_STATUS = '미답변' OR R.REVIEW_REPLY_STATUS IS NULL)
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY R.REVIEW_DATE DESC, R.REVIEW_ID DESC
    </select>

    <!--    리뷰답변 INSERT-->
    <insert id="insertReviewReply">
        INSERT INTO REVIEW_REPLY (REVIEW_ID, REVIEW_REPLY_CONT, REVIEW_REPLY_DATE)
        VALUES (#{REVIEW_ID}, #{REVIEW_REPLY_CONT}, NOW())
    </insert>

    <!--    리뷰답변 상태 UPDATE-->
    <update id="updateReviewStatus">
        UPDATE REVIEW
        SET REVIEW_REPLY_STATUS = '답변완료'
        WHERE REVIEW_ID=#{REVIEW_ID}
    </update>

    <!--    리뷰답변 갯수-->
    <select id="countReview">
    SELECT
    COUNT(*) AS TOTAL_REVIEW_COUNT,
    SUM(CASE WHEN REVIEW_REPLY_STATUS = '미답변' THEN 1 ELSE 0 END) AS UNANSWERED_REVIEW_COUNT,
    SUM(CASE WHEN REVIEW_REPLY_STATUS = '답변완료' THEN 1 ELSE 0 END) AS ANSWERED_REVIEW_COUNT
    FROM REVIEW;
    </select>

    <!--    리뷰 목록 검색결과 갯수-->
    <select id="countSearchReview" resultType="int">
        SELECT
        COUNT(*)
        FROM REVIEW R
        LEFT JOIN REVIEW_REPLY RR ON RR.REVIEW_ID = R.REVIEW_ID
        LEFT JOIN USER U ON U.USER_ID_NO = R.USER_ID_NO
        LEFT JOIN ORDER_PRODUCT OP ON OP.ORDER_PRODUCT_ID = R.ORDER_PRODUCT_ID
        LEFT JOIN PRODUCT P ON P.PRODUCT_ID = OP.PRODUCT_ID
        LEFT JOIN ORDER_TABLE O ON O.ORDER_ID = OP.ORDER_ID
        <where>
            <!-- 기본 검색 조건 -->
            <if test="startDate != null and endDate != null">
                AND R.REVIEW_DATE BETWEEN #{startDate} AND #{endDate}
            </if>

            <!-- 상품명 검색 -->
            <if test="searchType != null and searchType == '상품명' and searchField != null and searchField != ''">
                AND P.PRODUCT_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 회원ID 검색 -->
            <if test="searchType != null and searchType == '회원ID' and searchField != null and searchField != ''">
                AND U.USER_EMAIL LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 주문번호 검색 -->
            <if test="searchType != null and searchType == '주문번호' and searchField != null and searchField != ''">
                AND O.ORDER_ID = #{searchField}
            </if>

            <!-- 작성자명 검색 -->
            <if test="searchType != null and searchType == '작성자명' and searchField != null and searchField != ''">
                AND U.USER_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 작성자명 검색 -->
            <if test="REVIEW_ID != null">
                AND R.REVIEW_ID = ${REVIEW_ID}
            </if>

            <!-- 답변 상태 검색 -->
            <if test="replyStatus != null">
                <choose>
                    <when test="replyStatus == '전체'">
                        <!-- 아무 조건 없이 전체 리뷰 검색 -->
                    </when>
                    <when test="replyStatus == '답변완료'">
                        AND (R.REVIEW_REPLY_STATUS = '답변완료' OR R.REVIEW_REPLY_STATUS IS NULL)
                    </when>
                    <when test="replyStatus == '미답변'">
                        AND (R.REVIEW_REPLY_STATUS = '미답변' OR R.REVIEW_REPLY_STATUS IS NULL)
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <!--    회원목록 select-->

    <select id="adminSelectMember" resultType="HashMap">
        SELECT
        U.USER_ID_NO, U.USER_EMAIL, U.USER_NAME, U.USER_STATUS, U.USER_CREATED_AT, U.USER_WITHDRAWAL_DATE,
        COUNT(O.ORDER_ID) AS ORDER_COUNT
        FROM USER U
        LEFT JOIN USER_DELIVER_INFO UDI ON U.USER_ID_NO = UDI.USER_ID_NO
        LEFT JOIN ORDER_TABLE O ON UDI.DELIVER_ID = O.DELIVER_ID
        <where>
            <!-- 회원ID 검색 -->
            <if test="searchType != null and searchType == '회원ID' and searchField != null and searchField != ''">
                AND USER_EMAIL LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 닉네임 검색 -->
            <if test="searchType != null and searchType == '닉네임' and searchField != null and searchField != ''">
                AND USER_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 회원 상태 검색 -->
            <if test="userStatus != null">
                <if test="userStatus == '전체'">
                    <!-- 아무 조건 없이 전체 리뷰 검색 -->
                </if>
                <if test="userStatus == '활동회원'">
                    AND USER_STATUS = 1
                </if>
                <if test="userStatus == '탈퇴회원'">
                    AND USER_STATUS = 2
                </if>
            </if>
        </where>
        GROUP BY U.USER_ID_NO, U.USER_EMAIL, U.USER_NAME, U.USER_STATUS, U.USER_CREATED_AT
        ORDER BY USER_ID_NO DESC
    </select>

    <!--    회원상태 갯수-->
    <select id="countMember" resultType="HashMap">
        SELECT
            COUNT(*) AS TOTAL_MEMBER_COUNT,
            SUM(CASE WHEN USER_STATUS = 1 THEN 1 ELSE 0 END) AS ACTIVATING_USER,
            SUM(CASE WHEN USER_STATUS = 2 THEN 1 ELSE 0 END) AS NON_ACTIVATING_USER
        FROM USER
    </select>

    <!--    회원 목록 검색결과 갯수-->
    <select id="countSearchMember" resultType="int">
        SELECT
        COUNT(*)
        FROM USER U
        LEFT JOIN USER_DELIVER_INFO UDI ON U.USER_ID_NO = UDI.USER_ID_NO
        LEFT JOIN ORDER_TABLE O ON UDI.DELIVER_ID = O.DELIVER_ID
        <where>
            <!-- 회원ID 검색 -->
            <if test="searchType != null and searchType == '회원ID' and searchField != null and searchField != ''">
                AND USER_EMAIL LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 닉네임 검색 -->
            <if test="searchType != null and searchType == '닉네임' and searchField != null and searchField != ''">
                AND USER_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 회원 상태 검색 -->
            <if test="userStatus != null">
                <choose>
                    <when test="userStatus == '전체'">
                        <!-- 아무 조건 없이 전체 리뷰 검색 -->
                    </when>
                    <when test="userStatus == '활동회원'">
                        AND USER_STATUS = 1
                    </when>
                    <when test="userStatus == '탈퇴회원'">
                        AND USER_STATUS = 2
                    </when>
                </choose>
            </if>
        </where>
    </select>


    <!--유저 주문내역-->
    <select id="adminSelectOrderList" resultType="HashMap">
        SELECT OP.PRODUCT_ID, OT.ORDER_ID, OT.ORDER_DATE, OT.DELIVER_ID, P.PRODUCT_NAME, OT.ORDER_PRICE, I.IMAGE_URL
        FROM ORDER_TABLE OT
        JOIN ORDER_PRODUCT OP ON OT.ORDER_ID = OP.ORDER_ID
        JOIN USER_DELIVER_INFO UDI ON OT.DELIVER_ID = UDI.DELIVER_ID
        JOIN PRODUCT P ON OP.PRODUCT_ID = P.PRODUCT_ID
        JOIN IMAGE I ON I.PRODUCT_ID = P.PRODUCT_ID
        WHERE UDI.USER_ID_NO = #{USER_ID_NO}
        ORDER BY OT.ORDER_ID DESC
    </select>

    <!--    유저탈퇴-->
    <update id="withdrawalUser">
        UPDATE USER
        SET
        USER_STATUS = 2,
        USER_WITHDRAWAL_DATE = NOW()
        WHERE
        USER_ID_NO IN
        <foreach collection="selectedUserIdNo" item="USER_ID_NO" open="(" close=")" separator=",">
            #{USER_ID_NO}
        </foreach>
    </update>

    <!--    배너이미지 삽입-->
    <insert id="insertBanner">
        INSERT INTO BANNER
        VALUES (NULL, #{bannerTitle}, #{fireBaseImageUrl}, #{fileDBName}, #{bannerShowTime}, #{bannerStartDate}, #{bannerEndDate}, #{bannerHowLong}, NOW(), NULL, '게시중')
    </insert>

    <!--    배너목록 select-->
    <select id="adminSelectBanner" resultType="HashMap">
        SELECT *
        FROM BANNER
        <where>
            <!-- 배너제목 검색 -->
            <if test="searchField != null and searchField != ''">
                AND BANNER_TITLE LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 게시상태 검색 -->
            <if test="bannerStatus != null">
                <if test="bannerStatus == '전체'">
                    <!-- 아무 조건 없이 전체 리뷰 검색 -->
                </if>
                <if test="bannerStatus == '게시중'">
                    AND BANNER_STATUS = '게시중'
                </if>
                <if test="bannerStatus == '만료'">
                    AND BANNER_STATUS = '만료'
                </if>
                <if test="bannerStatus == '중지'">
                    AND BANNER_STATUS = '중지'
                </if>
            </if>
        </where>
        ORDER BY BANNER_ID DESC
    </select>

    <!--    배너상태 갯수-->
    <select id="countBanner" resultType="HashMap">
        SELECT
            COUNT(*) AS TOTAL_BANNER_COUNT,
            SUM(CASE WHEN BANNER_STATUS = '게시중' THEN 1 ELSE 0 END) AS ACTIVATING_BANNER,
            SUM(CASE WHEN BANNER_STATUS = '만료' THEN 1 ELSE 0 END) AS NON_ACTIVATING_BANNER,
            SUM(CASE WHEN BANNER_STATUS = '중지' THEN 1 ELSE 0 END) AS STOP_BANNER
        FROM BANNER
    </select>

    <!--    배너목록 검색결과 갯수-->
    <select id="countSearchBanner" resultType="int">
        SELECT COUNT(*)
        FROM BANNER
        <where>
            <!-- 배너제목 검색 -->
            <if test="searchField != null and searchField != ''">
                AND BANNER_TITLE LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 게시상태 검색 -->
            <if test="bannerStatus != null">
                <if test="bannerStatus == '전체'">
                    <!-- 아무 조건 없이 전체 리뷰 검색 -->
                </if>
                <if test="bannerStatus == '게시중'">
                    AND BANNER_STATUS = '게시중'
                </if>
                <if test="bannerStatus == '만료'">
                    AND BANNER_STATUS = '만료'
                </if>
                <if test="bannerStatus == '중지'">
                    AND BANNER_STATUS = '중지'
                </if>
            </if>
        </where>
    </select>

    <!--    배너아이디 조건 select-->
    <select id="adminSelectBannerByBannerId" resultType="HashMap">
        SELECT *
        FROM BANNER
        WHERE BANNER_ID=#{BANNER_ID}
    </select>

    <!--    배너이미지 변경후 edit-->
    <update id="editBannerChangeImg">
        UPDATE BANNER
        SET
            BANNER_TITLE=#{bannerTitle}
          , BANNER_IMG_URL=#{fireBaseImageUrl}
          , BANNER_IMAGE_PATH=#{fileDBName}
          , BANNER_SHOWTIME=#{bannerShowTime}
          , BANNER_START_DATE=#{bannerStartDate}
          , BANNER_END_DATE=#{bannerEndDate}
          , BANNER_HOWLONG=#{bannerHowLong}
          , BANNER_UPDATED_AT = NOW()
        WHERE BANNER_ID=#{BANNER_ID}
    </update>

    <!--    배너이미지 그대로 edit-->
    <update id="editBannerNONChangeImg">
        UPDATE BANNER
        SET
            BANNER_TITLE=#{bannerTitle}
          , BANNER_SHOWTIME=#{bannerShowTime}
          , BANNER_START_DATE=#{bannerStartDate}
          , BANNER_END_DATE=#{bannerEndDate}
          , BANNER_HOWLONG=#{bannerHowLong}
          , BANNER_UPDATED_AT = NOW()
        WHERE BANNER_ID=#{BANNER_ID}
    </update>

    <!--    배너 중지-->
    <update id="selectedBannerStop">
        UPDATE BANNER
        SET
        BANNER_STATUS = '중지'
        , BANNER_UPDATED_AT = NOW()
        WHERE
        BANNER_ID IN
        <foreach collection="selectedBannerId" item="BANNER_ID" open="(" close=")" separator=",">
            #{BANNER_ID}
        </foreach>
    </update>


    <select id="findExpiredBannersAsMap" resultType="java.util.HashMap">
        SELECT BANNER_ID AS bannerId, BANNER_TITLE AS bannerTitle, BANNER_END_DATE AS bannerEndDate
        FROM BANNER
        WHERE BANNER_END_DATE &lt;= #{today}
    </select>

    <update id="updateBannerStatus" parameterType="java.util.HashMap">
        UPDATE BANNER
        SET BANNER_STATUS = #{status}
        WHERE BANNER_ID = #{bannerId}
    </update>
</mapper>


