<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shop.fruitfruit.user.UserMapper">
    <!--    회원가입 정보 Insert -->
    <insert id="insertJoin" parameterType="javax.servlet.http.HttpServletRequest">
        INSERT INTO USER VALUES (null, #{id}, #{name}, #{pw}, #{phone}, 1, now())
    </insert>

    <!--    USER_ID 기준으로 회원정보 Select -->
    <select id="selectUser" resultType="HashMap">
        SELECT * FROM USER WHERE USER_EMAIL = #{id}

    </select>

    <!--    회원별 약관동의여부 Insert -->
    <insert id="insertTerm" parameterType="javax.servlet.http.HttpServletRequest">
        INSERT INTO TERM VALUES (null, #{USER_ID_NO}, #{marketing}, #{chk5_Checked}), (null, #{USER_ID_NO}, #{personal_Info}, #{chk6_Checked})
    </insert>


    <select id="loginUserChk" resultType="HashMap">
        SELECT USER_EMAIL, USER_PWD, USER_NAME FROM USER WHERE USER_EMAIL=#{id}

    </select>


    <!--    회원 닉네임 중복여부 -->
    <select id="joinNameChk" resultType="HashMap">
        SELECT USER_NAME FROM USER WHERE USER_NAME=#{name}

    </select>

    <!--    비밀번호 변경 -->
    <update id="updatePw">
        UPDATE USER SET USER_PWD = #{newpw} WHERE USER_EMAIL = #{id}

    </update>

    <!--    USER_ID_NO기준 배송지 정보 저장-->
    <insert id="insertDeliverInfo">
        INSERT INTO USER_DELIVER_INFO VALUES (null, #{USER_ID_NO}, #{deliverPlace}, #{deliverReceiverName}, #{deliverPhone}, #{deliverPostalCode}, #{deliverAddress}, #{deliverRequirement})
    </insert>

    <!--    USER_ID_NO기준 DELIVER_ID 가져오기 -->
    <select id="selectDeliverId" resultType="HashMap">
        SELECT DELIVER_ID FROM USER_DELIVER_INFO WHERE USER_ID_NO=#{USER_ID_NO} ORDER BY DELIVER_ID DESC LIMIT 1;

    </select>

    <!--    DELIEVER_ID 기준 주문 정보 저장-->
    <insert id="insertOrderInfo">
        INSERT INTO ORDER_TABLE VALUES (null, #{DELIVER_ID}, '카드결제', #{cardType}, #{cardName}, #{cardMonthlyInstallments}, #{orderPrice}, NOW(), '미결제')
    </insert>

    <!--    DELIVER_ID 기준 ORDER_ID 가져오기 -->
    <select id="selectOrderId" resultType="HashMap">
        SELECT ORDER_ID FROM ORDER_TABLE WHERE DELIVER_ID=#{DELIVER_ID}

    </select>

    <!--    DELIEVER_ID 기준 주문 정보 저장-->
    <insert id="insertOrderProduct">
        INSERT INTO ORDER_PRODUCT VALUES (null, #{ORDER_ID}, #{productId}, #{productQuantity}, #{productTotalPrice}, '미작성')
    </insert>


    <select id="selectOrderList" resultType="HashMap">
        SELECT UDI.*, OP.*, OT.ORDER_ID, OT.ORDER_DATE, OT.DELIVER_ID, P.PRODUCT_NAME, OT.ORDER_PRICE, I.IMAGE_URL
        FROM ORDER_TABLE OT
        JOIN ORDER_PRODUCT OP ON OT.ORDER_ID = OP.ORDER_ID
        JOIN USER_DELIVER_INFO UDI ON OT.DELIVER_ID = UDI.DELIVER_ID
        JOIN PRODUCT P ON OP.PRODUCT_ID = P.PRODUCT_ID
        JOIN IMAGE I ON I.PRODUCT_ID = P.PRODUCT_ID
        <where>

            <if test="startDate != null and endDate != null" >
                AND OT.ORDER_DATE BETWEEN #{startDate} AND #{endDate}
            </if>

            <!-- 이 부분은 searchField 가존재하는 경우 사용됩니다. -->
            <if test="searchType != null and searchType == '상품명' and searchField != null and searchField != ''">
                AND P.PRODUCT_NAME LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- 이 부분은 searchField 가존재하는 경우 사용됩니다. -->
            <if test="searchType != null and searchType == '주문번호' and searchField != null and searchField != ''">
                AND OT.ORDER_ID LIKE CONCAT('%', #{searchField}, '%')
            </if>

            <!-- USER_ID_NO 조건을 추가합니다. -->
            <if test="USER_ID_NO != null">
                AND UDI.USER_ID_NO = #{USER_ID_NO}
            </if>
        </where>

        ORDER BY OT.ORDER_ID DESC

    </select>

    <!--    재구매 장바구니를 위해 주문번호에 담긴 상품이름 조건으로 Product_ID 가져오기-->
    <select id="selectOrderProductId" resultType="HashMap">
        SELECT PRODUCT_ID FROM PRODUCT WHERE PRODUCT_NAME=#{order_product_name}
    </select>

    <!--    유저 배송지 추가-->
    <insert id="insertUserDeliveryAddressInfo">
        INSERT INTO USER_DELIVERY_ADDRESS VALUES (NULL, #{USER_ID_NO}, #{deliverPlace} , #{deliverReceiverName}, #{deliverPhone}, #{deliverPostalCode}, #{deliverAddress})
    </insert>

    <!--    유저 배송지 리스트 select -->
    <select id="selectUserDeliveryAddressList" resultType="HashMap">
        SELECT * FROM USER_DELIVERY_ADDRESS WHERE USER_ID_NO = #{USER_ID_NO} ORDER BY USER_DELIVERY_ID DESC
    </select>

    <!--    유저 배송지 리스트 개수 -->
    <select id="selectUserDeliveryAddressCount" resultType="int">
        SELECT COUNT(*) FROM USER_DELIVERY_ADDRESS WHERE USER_ID_NO = #{USER_ID_NO}
    </select>

    <!--    유저 배송지 수정-->
    <update id="updateUserDeliveryAddressInfo">
        UPDATE USER_DELIVERY_ADDRESS
        SET
            DELIVER_PLACE = #{deliverPlace}
          , DELIVER_RECEIVER_NAME = #{deliverReceiverName}
          , DELIVER_PHONE = #{deliverPhone}
          , DELIVER_POSTCODE = #{deliverPostalCode}
          , DELIVER_ADDRESS = #{deliverAddress}
        WHERE USER_DELIVERY_ID = #{deliverId}
    </update>

    <!--    유저 배송지 삭제-->
    <delete id="deleteUserDeliveryAddressInfo">
        DELETE FROM USER_DELIVERY_ADDRESS
        WHERE USER_DELIVERY_ID = #{deliverId}
    </delete>

    <!-- 유저 정보 수정-->
    <update id="updateUserInfo">
        UPDATE USER
        SET
            USER_NAME = #{name}
          , USER_PWD = #{newpw}
          , USER_PHONE = #{phone}
        WHERE USER_EMAIL = #{id}
    </update>

    <!--    로그인한 유저가 상품리뷰를 쓰기위해 구입한 상품리스트 select-->
    <select id="getOrdersByUserIdWithinLastMonth" resultType="HashMap">
        SELECT *
        FROM ORDER_PRODUCT op
        WHERE op.ORDER_ID IN (
            SELECT ot.ORDER_ID
            FROM ORDER_TABLE ot
            WHERE ot.DELIVER_ID IN (
                SELECT udi.DELIVER_ID
                FROM USER_DELIVER_INFO udi
                WHERE udi.USER_ID_NO = #{USER_ID_NO}
            )
              AND ot.ORDER_DATE BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH) AND CURRENT_DATE()
        )
          AND op.REVIEW_STATUS = '미작성';
    </select>

    <!--    리뷰작성내용 INSERT-->
    <insert id="insertReview">
        INSERT INTO REVIEW
        VALUES (NULL, #{ORDER_PRODUCT_ID}, #{USER_ID_NO}, #{REVIEW_CONT}, NOW(), '미답변')
    </insert>

    <!--    작성된 리뷰상품 상태 작성완료로 UPDATE -->
    <update id="updateReviewStatus">
        UPDATE ORDER_PRODUCT
        SET REVIEW_STATUS = '작성완료'
        WHERE ORDER_PRODUCT_ID=#{ORDER_PRODUCT_ID}
    </update>

    <!--    해당 상품의 리뷰와 리뷰답글 리스트 select-->
    <select id="reviewListByProductId" resultType="HashMap">
        SELECT
            R.REVIEW_ID,
            R.REVIEW_CONT,
            R.REVIEW_DATE,
            U.USER_ID_NO,
            U.USER_EMAIL,
            RR.REVIEW_REPLY_ID,
            RR.REVIEW_REPLY_CONT,
            RR.REVIEW_REPLY_DATE
        FROM
            REVIEW R
                LEFT JOIN
            REVIEW_REPLY RR ON R.REVIEW_ID = RR.REVIEW_ID
                INNER JOIN
            USER U ON R.USER_ID_NO = U.USER_ID_NO
        WHERE
                R.ORDER_PRODUCT_ID IN (
                SELECT OP.ORDER_PRODUCT_ID
                FROM ORDER_PRODUCT OP
                WHERE OP.PRODUCT_ID = #{productId}
            )
        ORDER BY
            R.REVIEW_DATE DESC
    </select>

    <!--    리뷰 내용 업데이트-->
    <update id="updateReview">
        UPDATE REVIEW
        SET REVIEW_CONT=#{REVIEW_CONT}
        WHERE REVIEW_ID=#{REVIEW_ID}
    </update>

</mapper>



